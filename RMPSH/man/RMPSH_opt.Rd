% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RMPSH_opt.R
\name{RMPSH_opt}
\alias{RMPSH_opt}
\title{Recursive Modified Direct Search on Hyper-rectangle}
\usage{
RMPSH_opt(
  x0,
  func,
  lb,
  ub,
  ...,
  rho_1 = 2,
  rho_2 = 2,
  phi = 1e-06,
  no_runs = 1000,
  max_iter = 10000,
  s_init = 2,
  tol_fun = 1e-06,
  tol_fun_2 = 1e-20,
  max_time = 36000,
  verbose = 0
)
}
\arguments{
\item{x0}{vector of initial guess provided by user.}

\item{func}{the function to be optimized, should be provided by the user.}

\item{lb}{vector of lower bounds, of same dimension as 'x0'.}

\item{ub}{vector of upper bound, of same dimension as 'x0'.}

\item{...}{other parameters to `func`}

\item{rho_1}{'step decay rate' for the first run only (default is 2).}

\item{rho_2}{'step decay rate' for second run onwards (default is 2).}

\item{phi}{lower bound of 'global step size'. Default value is \eqn{1e-6}.}

\item{no_runs}{max number of 'runs'. Default Value is 1000.}

\item{max_iter}{max number of iterations in each 'run'. Default Value is 10000.}

\item{s_init}{initial  'global step size'. Default Value is 2. It must be set
less than or equal to 2.}

\item{tol_fun}{termination tolerance on when to decrease the 'global step
size'. Default Value is \eqn{1e-6}. For more accuracy, user may set it to
smaller value e.g., \eqn{1e-20}. However, for expensive objective functions,
for faster computation, user should set it to a larger value e.g, \eqn{1e-3}.}

\item{tol_fun_2}{termination tolerance on the difference of norms of solution
points in two consecutive runs. Default Value is \eqn{1e-20}. However, for
expensive objective functions, for faster computation, user should set it to
a larger value e.g, \eqn{1e^-6}.}

\item{max_time}{time alloted (in seconds) for execution of RMPSH. Default is
36000 secs (10 hours).}

\item{verbose}{Binary Command to print optimized value of objective function
after each interation, 0 = no print, 1 = print. Default is 0.}
}
\value{
the optimal solution point.
}
\description{
`RMPSH_opt` can be used to minimize any non-convex blackbox function where each parameter
has an upper and lower bound.
}
\examples{
g <- function(y) {
  return(-20 * exp(-0.2 * sqrt(0.5 * (y[1]^2 + y[2]^2)))
    - exp(0.5 * (cos(2 * pi * y[1]) + cos(2 * pi * y[2])))
    + exp(1) + 20)
}

starting_point <- rep(1, 10)
g(starting_point)
solution <- RMPSH_opt(starting_point, g, rep(-33, 10), rep(33, 10))
g(solution)

# Will print the updates after each iteration
RMPSH_opt(c(2, 4, 6, 2, 1), g, rep(-3, 5), rep(23, 5), verbose = 1)

# Will exit and return result after 2 seconds
g <- function(y) {
  return(sum(y^2))
}
RMPSH_opt(rep(2.3, 100), g, rep(-11, 100), rep(13, 100), max_time = 2, verbose = 1)
}
